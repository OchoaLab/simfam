% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pop_recomb.R
\name{pop_recomb}
\alias{pop_recomb}
\title{Simulate genotypes with linkage disequilibrium (LD) given a population of haplotypes, using a Li-Stephens-like model of haplotype copying}
\usage{
pop_recomb(haps, bim, map, G, n_ind, geno = TRUE, loci_on_cols = FALSE)
}
\arguments{
\item{haps}{Regular matrix or \code{BEDMatrix} object of haplotype values, one row per locus, one column per haplotype (half individual), or transposed if \code{loci_on_cols = TRUE} and for \code{BEDMatrix} objects.
If \code{geno = TRUE} (default), these values should be numeric (recommended are zeroes and ones, indicating absence or presence of reference allele), but if \code{geno = FALSE} code will work with any values, including strings, which are just copied to outputs in blocks.}

\item{bim}{The table of variants, which is a data.frame/tibble with at least two columns: \code{chr} (must be numeric between 1 and the maximum chromosome in \code{map} below for map to work) and \code{pos} (base pair position, usually an integer).}

\item{map}{The genetic map, a list of chromosomes each of which is a data.frame/tibble with columns \code{pos} for base pair position and \code{posg} for genetic position.}

\item{G}{Number of generations since most recent common ancestor of population (to multiply standard recombination rate)}

\item{n_ind}{Number of individuals (if geno = TRUE) or haplotypes (half individuals, if geno = FALSE) desired in output}

\item{geno}{If \code{TRUE} (default) returns matrix of genotypes (values in 0,1,2 if \code{haps} is binary, otherwise double whatever the range of values in \code{haps} is), otherwise returns matrix of haplotypes (half individuals, same values of input \code{haps})}

\item{loci_on_cols}{If \code{TRUE}, \code{haps} has loci on columns and individuals on rows; if \code{FALSE} (default), loci are on rows and individuals on columns.
If \code{haps} is a \code{BEDMatrix} object, \code{loci_on_cols} is ignored (set automatically to \code{TRUE} internally).}
}
\value{
A matrix with the same number of rows as \code{haps} and \code{n_ind} columns, with values copied from \code{haps} in (recombination) blocks if \code{geno = FALSE}, or sums of two such values drawn independently when \code{geno = TRUE}.
}
\description{
Each new genome has breaks drawn from the recombination model accelerated for the desired number of generations \code{G}, and haplotypes are drawn and copied randomly from the population.
This results in a population with individuals drawn independently and identically distributed but with LD within individuals, since the ancestral LD is preserved to some extent (attenuated by recombination after \code{G} generations).
If there is no LD in \code{haps}, then the output will not have LD either except when the number of columns of \code{haps} is very small (which resembles a bottleneck).
This model does not introduce mutations (unlike the original Li-Stephens).
Genotypes, when requested, are simply sums of independently drawn haplotype values.
}
\examples{
# simulate a tiny population with few SNPs for example
library(tibble)
bim <- tibble(
  chr = c(2, 2, 3, 3, 22),
  pos = c(100, 121, 53, 154, 66) * 1e6
)
m_loci <- nrow( bim )
# Most often, haplotypes are binary data as simulated here.
# Here haplotypes will be totally unstructured, but to have LD in the output use real human data
# or data simulated to have LD
n_ind_haps <- 5
haps <- matrix(
  rbinom( m_loci * n_ind_haps, 1, 0.5 ),
  nrow = m_loci,
  ncol = n_ind_haps
)
# makes sense to have a lot of recombination at the population level
G <- 500
# ask for small output for example
n_ind <- 7
# use the recombination map for the same genome build as your data!
map <- recomb_map_hg38

# simulate genotypes!  (Usually more convenient, but phase information is lost)
X <- pop_recomb( haps, bim, map, G, n_ind )

# simulate haplotypes instead (preserves true phase)
H <- pop_recomb( haps, bim, map, G, n_ind, geno = FALSE )

}
